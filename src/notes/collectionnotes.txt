int to Integer / primitive to wrapper;

int[] data = {1,2,3,4,5,6};

// To boxed array
Integer[] toInteger = Arrays.stream( data ).boxed().toArray( Integer[]::new );

or using InStream of;
Integer[] toInteger = IntStream.of( data ).boxed().toArray( Integer[]::new );

// To boxed list
List<Integer> toListInteger  = Arrays.stream( data ).boxed().collect( Collectors.toList() );

or using InStream of;
List<Integer> toListInteger = IntStream.of( data ).boxed().collect( Collectors.toList() );

********************************************************************************************

List<Integer> ranks=new ArrayList<>(Arrays.asList(-8,-7,-6,-5,-4,-3,-2,-1,1,2,3,4,5,6,7,8));

find value of list;

int value = ranks.stream()                       
.filter(x -> inputRank==(x.intValue()))        
.findAny()                                      
.orElse(0);



find index given by value;

IntStream.range(0, ranks.size())
                .filter(x -> inputRank==ranks.get(x))        
                .findFirst()                                     
                .orElse(0);

********************************************************************************************

Sort two dimensional array using Arrays.sort and comparator

java.util.Arrays.sort(intervals, new java.util.Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return Integer.compare(a[0], b[0]);
            }
        });

********************************************************************************************
find intervals;

intervals == null ? 0 : (int) Arrays.stream(intervals)
                .flatMapToInt(interval -> IntStream.range(interval[0], interval[1]))
                .distinct()
                .count();
